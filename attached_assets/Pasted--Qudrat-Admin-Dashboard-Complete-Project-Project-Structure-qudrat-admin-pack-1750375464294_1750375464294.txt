# Qudrat Admin Dashboard - Complete Project

## 📁 Project Structure
```
qudrat-admin/
├── package.json
├── package-lock.json
├── index.html
├── vite.config.js
├── .env.example
├── README.md
├── src/
│   ├── main.jsx
│   ├── App.jsx
│   ├── index.css
│   ├── components/
│   │   ├── Dashboard.jsx
│   │   ├── QuestionsView.jsx
│   │   ├── QuestionModal.jsx
│   │   ├── Sidebar.jsx
│   │   └── PassagesView.jsx
│   ├── hooks/
│   │   └── useSupabase.js
│   └── utils/
│       └── supabase.js
└── public/
    └── favicon.ico
```

---

## 📄 package.json
```json
{
  "name": "qudrat-admin",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "@supabase/supabase-js": "^2.38.4",
    "lucide-react": "^0.263.1"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.4.0",
    "vite": "^5.0.8"
  }
}
```

---

## 📄 index.html
```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Qudrat Admin Dashboard</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
```

---

## 📄 vite.config.js
```javascript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000
  }
})
```

---

## 📄 .env.example
```env
VITE_SUPABASE_URL=your_supabase_project_url_here
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key_here
```

---

## 📄 src/main.jsx
```jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
```

---

## 📄 src/index.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
}

.scrollbar-hide {
  -ms-overflow-style: none;
  scrollbar-width: none;
}

.scrollbar-hide::-webkit-scrollbar {
  display: none;
}
```

---

## 📄 src/utils/supabase.js
```javascript
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables')
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
```

---

## 📄 src/hooks/useSupabase.js
```javascript
import { useState, useEffect } from 'react'
import { supabase } from '../utils/supabase'

export const useSupabase = () => {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)

  const executeQuery = async (queryFn) => {
    setLoading(true)
    setError(null)
    try {
      const result = await queryFn()
      setLoading(false)
      return result
    } catch (err) {
      setError(err.message)
      setLoading(false)
      throw err
    }
  }

  const loadQuestions = async () => {
    return executeQuery(async () => {
      const { data, error } = await supabase
        .from('question_details')
        .select('*')
        .order('q_no', { ascending: false })
      
      if (error) throw error
      return data || []
    })
  }

  const loadPassages = async () => {
    return executeQuery(async () => {
      const { data, error } = await supabase
        .from('passages')
        .select('*')
        .order('created_at', { ascending: false })
      
      if (error) throw error
      return data || []
    })
  }

  const loadQuestionTypes = async () => {
    return executeQuery(async () => {
      const { data, error } = await supabase
        .from('question_types')
        .select('*')
      
      if (error) throw error
      return data || []
    })
  }

  const loadInternalTypes = async () => {
    return executeQuery(async () => {
      const { data, error } = await supabase
        .from('internal_types')
        .select('*')
      
      if (error) throw error
      return data || []
    })
  }

  const saveQuestion = async (questionData, isEdit = false, questionId = null) => {
    return executeQuery(async () => {
      if (isEdit) {
        const { error } = await supabase
          .from('questions')
          .update(questionData)
          .eq('q_no', questionId)
        
        if (error) throw error
      } else {
        const { error } = await supabase
          .from('questions')
          .insert([questionData])
        
        if (error) throw error
      }
    })
  }

  const deleteQuestion = async (questionId) => {
    return executeQuery(async () => {
      const { error } = await supabase
        .from('questions')
        .delete()
        .eq('q_no', questionId)
      
      if (error) throw error
    })
  }

  const uploadImage = async (file, path) => {
    return executeQuery(async () => {
      const fileExt = file.name.split('.').pop()
      const fileName = `${path}_${Date.now()}.${fileExt}`
      const filePath = `question-images/${fileName}`

      const { error: uploadError } = await supabase.storage
        .from('question-images')
        .upload(filePath, file)

      if (uploadError) throw uploadError

      const { data } = supabase.storage
        .from('question-images')
        .getPublicUrl(filePath)

      return data.publicUrl
    })
  }

  return {
    loading,
    error,
    loadQuestions,
    loadPassages,
    loadQuestionTypes,
    loadInternalTypes,
    saveQuestion,
    deleteQuestion,
    uploadImage
  }
}
```

---

## 📄 src/components/Sidebar.jsx
```jsx
import React from 'react'
import { 
  Home, 
  FileText, 
  BookOpen, 
  BarChart3, 
  Settings, 
  LogOut 
} from 'lucide-react'

const Sidebar = ({ currentView, setCurrentView }) => {
  const menuItems = [
    { id: 'dashboard', icon: Home, label: 'Dashboard' },
    { id: 'questions', icon: FileText, label: 'Questions' },
    { id: 'passages', icon: BookOpen, label: 'Passages' },
    { id: 'analytics', icon: BarChart3, label: 'Analytics' },
    { id: 'settings', icon: Settings, label: 'Settings' }
  ]

  return (
    <div className="w-64 bg-gray-900 text-white h-screen fixed left-0 top-0 overflow-y-auto">
      <div className="p-6">
        <h1 className="text-2xl font-bold text-blue-400">Qudrat Admin</h1>
        <p className="text-gray-400 text-sm">Question Management</p>
      </div>
      
      <nav className="mt-8">
        {menuItems.map(({ id, icon: Icon, label }) => (
          <button
            key={id}
            onClick={() => setCurrentView(id)}
            className={`w-full flex items-center px-6 py-3 text-left hover:bg-gray-800 transition-colors ${
              currentView === id ? 'bg-blue-600 border-r-4 border-blue-400' : ''
            }`}
          >
            <Icon size={20} className="mr-3" />
            {label}
          </button>
        ))}
      </nav>
      
      <div className="absolute bottom-0 w-full p-6">
        <button className="flex items-center text-gray-400 hover:text-white">
          <LogOut size={20} className="mr-3" />
          Logout
        </button>
      </div>
    </div>
  )
}

export default Sidebar
```

---

## 📄 src/components/Dashboard.jsx
```jsx
import React from 'react'

const Dashboard = ({ questions, passages }) => {
  const stats = [
    { title: 'Total Questions', value: questions.length, color: 'blue' },
    { title: 'Total Passages', value: passages.length, color: 'green' },
    { title: 'Active Questions', value: questions.filter(q => q.status === 'active').length, color: 'yellow' },
    { title: 'Draft Questions', value: questions.filter(q => q.status === 'draft').length, color: 'purple' }
  ]

  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold text-gray-900">Dashboard</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map(({ title, value, color }) => (
          <div key={title} className="bg-white p-6 rounded-lg shadow-sm border">
            <h3 className="text-sm font-medium text-gray-500">{title}</h3>
            <p className={`text-3xl font-bold text-${color}-600 mt-2`}>{value}</p>
          </div>
        ))}
      </div>
      
      <div className="bg-white p-6 rounded-lg shadow-sm border">
        <h2 className="text-xl font-semibold mb-4">Recent Questions</h2>
        <div className="space-y-3">
          {questions.slice(0, 5).map(question => (
            <div key={question.q_no} className="flex items-center justify-between p-3 bg-gray-50 rounded">
              <div>
                <p className="font-medium">{question.question_title || 'No Title'}</p>
                <p className="text-sm text-gray-600">{question.question_text?.substring(0, 100)}...</p>
              </div>
              <span className={`px-2 py-1 rounded text-xs ${
                question.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
              }`}>
                {question.status}
              </span>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

export default Dashboard
```

---

## 📄 src/components/QuestionsView.jsx
```jsx
import React, { useState } from 'react'
import { Plus, Search, Edit, Trash2 } from 'lucide-react'

const QuestionsView = ({ 
  questions, 
  onAddQuestion, 
  onEditQuestion, 
  onDeleteQuestion 
}) => {
  const [searchTerm, setSearchTerm] = useState('')
  const [filterType, setFilterType] = useState('all')

  const filteredQuestions = questions.filter(question => {
    const matchesSearch = question.question_text?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         question.question_title?.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesFilter = filterType === 'all' || question.type_name === filterType
    return matchesSearch && matchesFilter
  })

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold text-gray-900">Questions Management</h1>
        <button
          onClick={onAddQuestion}
          className="bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center hover:bg-blue-700 transition-colors"
        >
          <Plus size={20} className="mr-2" />
          Add Question
        </button>
      </div>
      
      <div className="bg-white p-6 rounded-lg shadow-sm border">
        <div className="flex flex-col sm:flex-row gap-4 mb-6">
          <div className="flex-1">
            <div className="relative">
              <Search size={20} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="text"
                placeholder="Search questions..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          </div>
          <select
            value={filterType}
            onChange={(e) => setFilterType(e.target.value)}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            <option value="all">All Types</option>
            <option value="لفظي">لفظي</option>
            <option value="كمي">كمي</option>
          </select>
        </div>
        
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Difficulty</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredQuestions.map(question => (
                <tr key={question.q_no} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                    {question.q_no}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div className="text-sm font-medium text-gray-900">
                        {question.question_title || 'No Title'}
                      </div>
                      <div className="text-sm text-gray-500">
                        {question.question_text?.substring(0, 50)}...
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">{question.type_name}</div>
                    <div className="text-sm text-gray-500">{question.internal_name}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      question.status === 'active' 
                        ? 'bg-green-100 text-green-800'
                        : question.status === 'draft'
                        ? 'bg-yellow-100 text-yellow-800'
                        : 'bg-gray-100 text-gray-800'
                    }`}>
                      {question.status}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {question.avg_difficulty?.toFixed(1)}%
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div className="flex space-x-2">
                      <button
                        onClick={() => onEditQuestion(question)}
                        className="text-blue-600 hover:text-blue-900"
                      >
                        <Edit size={16} />
                      </button>
                      <button
                        onClick={() => onDeleteQuestion(question.q_no)}
                        className="text-red-600 hover:text-red-900"
                      >
                        <Trash2 size={16} />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  )
}

export default QuestionsView
```

---

## 📄 src/components/QuestionModal.jsx
```jsx
import React, { useState, useEffect } from 'react'
import { X, Save, Upload } from 'lucide-react'

const QuestionModal = ({
  isOpen,
  onClose,
  onSave,
  editingQuestion,
  questionTypes,
  internalTypes,
  onImageUpload,
  loading
}) => {
  const [formData, setFormData] = useState({
    question_title: '',
    question_text: '',
    question_image: '',
    mc_a: '',
    mc_b: '',
    mc_c: '',
    mc_d: '',
    mc_correct: 'A',
    type_id: 1,
    internal_type_id: 1,
    passage_id: null,
    question_order: 1,
    explanation_image: '',
    hint_image: '',
    tags: '',
    status: 'draft'
  })

  useEffect(() => {
    if (editingQuestion) {
      setFormData({
        question_title: editingQuestion.question_title || '',
        question_text: editingQuestion.question_text || '',
        question_image: editingQuestion.question_image || '',
        mc_a: editingQuestion.mc_a || '',
        mc_b: editingQuestion.mc_b || '',
        mc_c: editingQuestion.mc_c || '',
        mc_d: editingQuestion.mc_d || '',
        mc_correct: editingQuestion.mc_correct || 'A',
        type_id: editingQuestion.type_id || 1,
        internal_type_id: editingQuestion.internal_type_id || 1,
        passage_id: editingQuestion.passage_id || null,
        question_order: editingQuestion.question_order || 1,
        explanation_image: editingQuestion.explanation_image || '',
        hint_image: editingQuestion.hint_image || '',
        tags: editingQuestion.tags || '',
        status: editingQuestion.status || 'draft'
      })
    } else {
      setFormData({
        question_title: '',
        question_text: '',
        question_image: '',
        mc_a: '',
        mc_b: '',
        mc_c: '',
        mc_d: '',
        mc_correct: 'A',
        type_id: 1,
        internal_type_id: 1,
        passage_id: null,
        question_order: 1,
        explanation_image: '',
        hint_image: '',
        tags: '',
        status: 'draft'
      })
    }
  }, [editingQuestion, isOpen])

  const handleSubmit = (e) => {
    e.preventDefault()
    onSave(formData)
  }

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const getFilteredInternalTypes = () => {
    return internalTypes.filter(type => type.type_id === parseInt(formData.type_id))
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center p-6 border-b">
          <h2 className="text-xl font-semibold">
            {editingQuestion ? 'Edit Question' : 'Add New Question'}
          </h2>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <X size={24} />
          </button>
        </div>
        
        <form onSubmit={handleSubmit} className="p-6 space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Question Title
              </label>
              <input
                type="text"
                value={formData.question_title}
                onChange={(e) => handleInputChange('question_title', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="e.g., اجب على السؤال"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Status
              </label>
              <select
                value={formData.status}
                onChange={(e) => handleInputChange('status', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="draft">Draft</option>
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
              </select>
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Question Text *
            </label>
            <textarea
              value={formData.question_text}
              onChange={(e) => handleInputChange('question_text', e.target.value)}
              rows={3}
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Enter the question text here..."
            />
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Question Type
              </label>
              <select
                value={formData.type_id}
                onChange={(e) => handleInputChange('type_id', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                {questionTypes.map(type => (
                  <option key={type.type_id} value={type.type_id}>
                    {type.type_name}
                  </option>
                ))}
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Internal Type
              </label>
              <select
                value={formData.internal_type_id}
                onChange={(e) => handleInputChange('internal_type_id', parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                {getFilteredInternalTypes().map(type => (
                  <option key={type.internal_type_id} value={type.internal_type_id}>
                    {type.internal_name}
                  </option>
                ))}
              </select>
            </div>
          </div>
          
          <div className="grid grid-cols-2 gap-4">
            {['mc_a', 'mc_b', 'mc_c', 'mc_d'].map((option, index) => (
              <div key={option}>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Option {String.fromCharCode(65 + index)} *
                </label>
                <input
                  type="text"
                  value={formData[option]}
                  onChange={(e) => handleInputChange(option, e.target.value)}
                  required
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder={`Option ${String.fromCharCode(65 + index)}`}
                />
              </div>
            ))}
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Correct Answer *
            </label>
            <select
              value={formData.mc_correct}
              onChange={(e) => handleInputChange('mc_correct', e.target.value)}
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="A">A</option>
              <option value="B">B</option>
              <option value="C">C</option>
              <option value="D">D</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Tags (comma-separated)
            </label>
            <input
              type="text"
              value={formData.tags}
              onChange={(e) => handleInputChange('tags', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="e.g., استيعاب المقروء, فكرة رئيسية"
            />
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {[
              { key: 'question_image', label: 'Question Image' },
              { key: 'explanation_image', label: 'Explanation Image' },
              { key: 'hint_image', label: 'Hint Image' }
            ].map(({ key, label }) => (
              <div key={key}>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  {label}
                </label>
                <div className="space-y-2">
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => onImageUpload(e.target.files[0], key)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                  {formData[key] && (
                    <div className="flex items-center space-x-2">
                      <div className="w-4 h-4 bg-green-600 rounded"></div>
                      <span className="text-xs text-green-600">Image uploaded</span>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
          
          <div className="flex justify-end space-x-4 pt-6 border-t bg-gray-50 -mx-6 -mb-6 px-6 py-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={loading}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors flex items-center disabled:opacity-50"
            >
              <Save size={16} className="mr-2" />
              {loading ? 'Saving...' : 'Save Question'}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

export default QuestionModal
```

---

## 📄 src/components/PassagesView.jsx
```jsx
import React from 'react'
import { BookOpen } from 'lucide-react'

const PassagesView = () => {
  return (
    <div className="text-center py-12">
      <BookOpen size={48} className="mx-auto text-gray-400 mb-4" />
      <h3 className="text-lg font-medium text-gray-900 mb-2">Passages Management</h3>
      <p className="text-gray-600">Passage management feature coming soon...</p>
      <div className="mt-8 bg-white p-6 rounded-lg shadow-sm border max-w-md mx-auto">
        <h4 className="font-medium text-gray-900 mb-2">Coming Features:</h4>
        <ul className="text-sm text-gray-600 text-left space-y-1">
          <li>• Upload passage images</li>
          <li>• Link questions to passages</li>
          <li>• Manage passage difficulty</li>
          <li>• Preview passage layout</li>
        </ul>
      </div>
    </div>
  )
}

export default PassagesView
```

---

## 📄 src/App.jsx
```jsx
import React, { useState, useEffect } from 'react'
import { BarChart3, Settings } from 'lucide-react'
import { useSupabase } from './hooks/useSupabase'
import Sidebar from './components/Sidebar'
import Dashboard from './components/Dashboard'
import QuestionsView from './components/QuestionsView'
import QuestionModal from './components/QuestionModal'
import PassagesView from './components/PassagesView'

const App = () => {
  const [currentView, setCurrentView] = useState('dashboard')
  const [questions, setQuestions] = useState([])
  const [passages, setPassages] = useState([])
  const [questionTypes, setQuestionTypes] = useState([])
  const [internalTypes, setInternalTypes] = useState([])
  const [showModal, setShowModal] = useState(false)
  const [editingQuestion, setEditingQuestion] = useState(null)

  const {
    loading,
    error,
    loadQuestions,
    loadPassages,
    loadQuestionTypes,
    loadInternalTypes,
    saveQuestion,
    deleteQuestion,
    uploadImage
  } = useSupabase()

  useEffect(() => {
    loadInitialData()
  }, [])

  const loadInitialData = async () => {
    try {
      const [questionsData, passagesData, typesData, internalTypesData] = await Promise.all([
        loadQuestions(),
        loadPassages(),
        loadQuestionTypes(),
        loadInternalTypes()
      ])
      
      setQuestions(questionsData)
      setPassages(passagesData)
      setQuestionTypes(typesData)
      setInternalTypes(internalTypesData)
    } catch (err) {
      console.error('Error loading initial data:', err)
    }
  }

  const handleSaveQuestion = async (questionData) => {
    try {
      await saveQuestion(
        questionData,
        !!editingQuestion,
        editingQuestion?.q_no
      )
      
      await loadQuestions()
      setShowModal(false)
      setEditingQuestion(null)
    } catch (err) {
      alert('Error saving question: ' + err.message)
    }
  }

  const handleDeleteQuestion = async (questionId) => {
    if (!confirm('Are you sure you want to delete this question?')) return
    
    try {
      await deleteQuestion(questionId)
      await loadQuestions()
    } catch (err) {
      alert('Error deleting question: ' + err.message)
    }
  }

  const handleImageUpload = async (file, type) => {
    if (!file) return
    
    try {
      const imageUrl = await uploadImage(file, type)
      // The QuestionModal component will handle updating the form data
      return imageUrl
    } catch (err) {
      alert('Error uploading image: ' + err.message)
    }
  }

  const openAddQuestionModal = () => {
    setEditingQuestion(null)
    setShowModal(true)
  }

  const openEditQuestionModal = (question) => {
    setEditingQuestion(question)
    setShowModal(true)
  }

  const closeModal = () => {
    setShowModal(false)
    setEditingQuestion(null)
  }

  if (loading && questions.length === 0) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading Qudrat Admin...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="text-center">
          <div className="text-red-600 text-xl mb-4">Error Loading Application</div>
          <p className="text-gray-600">{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
          >
            Retry
          </button>
        </div>
      </div>
    )
  }

  const renderCurrentView = () => {
    switch (currentView) {
      case 'dashboard':
        return <Dashboard questions={questions} passages={passages} />
      
      case 'questions':
        return (
          <QuestionsView
            questions={questions}
            onAddQuestion={openAddQuestionModal}
            onEditQuestion={openEditQuestionModal}
            onDeleteQuestion={handleDeleteQuestion}
          />
        )
      
      case 'passages':
        return <PassagesView />
      
      case 'analytics':
        return (
          <div className="text-center py-12">
            <BarChart3 size={48} className="mx-auto text-gray-400 mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Analytics Dashboard</h3>
            <p className="text-gray-600">Analytics feature coming soon...</p>
            <div className="mt-8 bg-white p-6 rounded-lg shadow-sm border max-w-md mx-auto">
              <h4 className="font-medium text-gray-900 mb-2">Coming Features:</h4>
              <ul className="text-sm text-gray-600 text-left space-y-1">
                <li>• Question difficulty trends</li>
                <li>• Performance analytics</li>
                <li>• Usage statistics</li>
                <li>• Export reports</li>
              </ul>
            </div>
          </div>
        )
      
      case 'settings':
        return (
          <div className="text-center py-12">
            <Settings size={48} className="mx-auto text-gray-400 mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Settings</h3>
            <p className="text-gray-600">Settings feature coming soon...</p>
            <div className="mt-8 bg-white p-6 rounded-lg shadow-sm border max-w-md mx-auto">
              <h4 className="font-medium text-gray-900 mb-2">Coming Features:</h4>
              <ul className="text-sm text-gray-600 text-left space-y-1">
                <li>• System configuration</li>
                <li>• User management</li>
                <li>• Backup settings</li>
                <li>• Import/Export tools</li>
              </ul>
            </div>
          </div>
        )
      
      default:
        return <Dashboard questions={questions} passages={passages} />
    }
  }

  return (
    <div className="min-h-screen bg-gray-100 flex">
      <Sidebar currentView={currentView} setCurrentView={setCurrentView} />
      
      <div className="flex-1 ml-64">
        <header className="bg-white shadow-sm border-b">
          <div className="px-6 py-4">
            <div className="flex items-center justify-between">
              <h2 className="text-lg font-semibold text-gray-900 capitalize">
                {currentView}
              </h2>
              <div className="flex items-center space-x-4">
                <span className="text-sm text-gray-600">
                  {questions.length} Total Questions
                </span>
                {loading && (
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                )}
              </div>
            </div>
          </div>
        </header>
        
        <main className="p-6">
          {renderCurrentView()}
        </main>
      </div>
      
      <QuestionModal
        isOpen={showModal}
        onClose={closeModal}
        onSave={handleSaveQuestion}
        editingQuestion={editingQuestion}
        questionTypes={questionTypes}
        internalTypes={internalTypes}
        onImageUpload={handleImageUpload}
        loading={loading}
      />
    </div>
  )
}

export default App
```

---

## 📄 tailwind.config.js
```javascript
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
```

---

## 📄 postcss.config.js
```javascript
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
```

---

## 📄 README.md
```markdown
# Qudrat Admin Dashboard

A professional React-based admin dashboard for managing Qudrat test questions and passages.

## 🚀 Quick Start

### 1. Download & Setup
```bash
# Extract the project files
# Navigate to project directory
cd qudrat-admin

# Install dependencies
npm install
```

### 2. Configure Supabase
```bash
# Copy environment template
cp .env.example .env

# Edit .env file and add your Supabase credentials:
VITE_SUPABASE_URL=your_supabase_project_url_here
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key_here
```

### 3. Run the Application
```bash
# Start development server
npm run dev

# Open browser to http://localhost:3000
```

## 📁 Project Structure

```
src/
├── components/          # React components
├── hooks/              # Custom hooks
├── utils/              # Utility functions
├── App.jsx             # Main app component
├── main.jsx            # Entry point
└── index.css           # Global styles
```

## ✨ Features

### ✅ Currently Available:
- **Dashboard Overview** - Statistics and recent questions
- **Question Management** - Add, edit, delete questions
- **Image Upload** - Direct integration with Supabase Storage
- **Search & Filter** - Find questions quickly
- **Responsive Design** - Works on all devices
- **Real-time Updates** - Instant data synchronization

### 🔄 Coming Soon:
- **Passage Management** - Upload and manage reading passages
- **Analytics Dashboard** - Performance and difficulty analytics
- **Bulk Operations** - Import/export multiple questions
- **Advanced Settings** - System configuration options

## 🛠️ Technology Stack

- **Frontend:** React 18 + Vite
- **Styling:** Tailwind CSS
- **Icons:** Lucide React
- **Backend:** Supabase
- **Storage:** Supabase Storage
- **Database:** PostgreSQL (via Supabase)

## 📝 Usage Guide

### Adding Questions:
1. Click "Add Question" button
2. Fill in question details
3. Upload images (optional)
4. Set correct answer
5. Save question

### Managing Questions:
- **Search:** Use search bar to find specific questions
- **Filter:** Filter by question type (لفظي/كمي)
- **Edit:** Click edit icon to modify questions
- **Delete:** Click delete icon to remove questions

### Image Management:
- Drag & drop or browse to select images
- Images automatically uploaded to Supabase Storage
- Supports PNG, JPG, GIF formats
- Recommended size: 1200px width, variable height

## 🔧 Configuration

### Supabase Setup:
1. Create new Supabase project
2. Run the SQL schema (provided separately)
3. Set up storage bucket named 'question-images'
4. Configure Row Level Security policies
5. Add project URL and anon key to .env

### Storage Bucket Setup:
```sql
-- Create storage bucket
INSERT INTO storage.buckets (id, name, public) 
VALUES ('question-images', 'question-images', true);

-- Allow public read access
CREATE POLICY "Public Access" ON storage.objects
FOR SELECT USING (bucket_id = 'question-images');
```

## 🚀 Deployment

### Build for Production:
```bash
npm run build
```

### Deploy Options:
- **Vercel:** Connect GitHub repo for auto-deployment
- **Netlify:** Drag & drop build folder
- **Supabase:** Use Supabase hosting
- **Custom Server:** Upload build files to your server

## 🐛 Troubleshooting

### Common Issues:

1. **Supabase Connection Error:**
   - Check .env file has correct URL and key
   - Verify Supabase project is active

2. **Image Upload Failed:**
   - Ensure storage bucket exists
   - Check storage policies are configured
   - Verify file size < 50MB

3. **Data Not Loading:**
   - Check database tables exist
   - Verify RLS policies allow read access
   - Check browser console for errors

## 📧 Support

If you need help:
1. Check browser console for errors
2. Verify Supabase configuration
3. Ensure all environment variables are set
4. Contact support with error details

## 🔄 Updates

To update the application:
1. Pull latest changes
2. Run `npm install` for new dependencies
3. Update environment variables if needed
4. Restart development server
```

---

## 📄 .gitignore
```
# Dependencies
node_modules/
.pnp
.pnp.js

# Production
build/
dist/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Cache
.cache/
```

---

## 🚀 Installation Instructions

### 1. Download Project:
Save all the files above in the exact folder structure shown.

### 2. Setup Commands:
```bash
# Navigate to project folder
cd qudrat-admin

# Install dependencies
npm install

# Create environment file
cp .env.example .env

# Edit .env with your Supabase credentials
# Then start the development server
npm run dev
```

### 3. Add Your Supabase Credentials:
Edit the `.env` file:
```env
VITE_SUPABASE_URL=https://your-project.supabase.co
VITE_SUPABASE_ANON_KEY=your-anon-key-here
```

### 4. Access Dashboard:
Open browser to: `http://localhost:3000`

## ✨ What You Get:

- ✅ **Complete React Admin Dashboard**
- ✅ **Professional UI with Tailwind CSS**
- ✅ **Full CRUD operations for questions**
- ✅ **Image upload to Supabase Storage**
- ✅ **Search and filtering**
- ✅ **Responsive design**
- ✅ **Ready for production deployment**

The dashboard is fully functional and ready to use! You can start adding questions immediately and expand features as needed.